{"version":3,"sources":["hooks/useLocalStorage.js","components/Login.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/OpenConversation.js","components/Conversations.js","components/Contacts.js","components/NewConversationModal.js","components/NewContactModal.js","components/Sidebar.js","components/Dashboard.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","Group","Label","Control","type","ref","required","Button","onClick","uuidv4","variant","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectConversationIndex","setSelectConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","createConversation","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","r","InputGroup","as","onChange","target","resize","Conversations","ListGroup","Item","action","active","join","Contacts","NewConversationModal","closeModal","selectContactIds","setSelectContactIds","Modal","Header","closeButton","Body","controlId","Check","includes","label","contactId","prevSelectedContactIds","filter","prevId","NewContactModal","nameRef","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","conversationsOpen","cursor","width","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","Dashboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9192414.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst PREFIX = \"chat-\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [prefixedKey, value]);\r\n\r\n  return [value, setValue];\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Container, Form, Button } from \"react-bootstrap\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    onIdSubmit(idRef.current.value);\r\n  }\r\n\r\n  function createNewId() {\r\n    onIdSubmit(uuidv4());\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      className=\"align-items-center d-flex\"\r\n      style={{ height: \"100vh\" }}\r\n    >\r\n      <Form onSubmit={handleSubmit} className=\"w-100\">\r\n        <Form.Group>\r\n          <Form.Label>Coloque sua ID</Form.Label>\r\n          <Form.Control type=\"text\" ref={idRef} required></Form.Control>\r\n        </Form.Group>\r\n        <div className=\"mt-2\">\r\n          <Button className=\"me-2\" type=\"submit\">\r\n            Logar\r\n          </Button>\r\n          <Button onClick={createNewId} variant=\"secondary\">\r\n            Criar uma nova ID\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nconst ContactsContext = React.createContext();\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext);\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\r\n\r\n  function createContact(id, name) {\r\n    setContacts((prevContacts) => {\r\n      return [...prevContacts, { id, name }];\r\n    });\r\n  }\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState();\r\n\r\n  useEffect(() => {\r\n    const newSocket = io(\"https://young-sands-66957.herokuapp.com/\", {\r\n      query: { id },\r\n    });\r\n    setSocket(newSocket);\r\n\r\n    return () => newSocket.close();\r\n  }, [id]);\r\n  return (\r\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n","import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport { useSocket } from \"./SocketProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage(\r\n    \"conversations\",\r\n    []\r\n  );\r\n  const [selectConversationIndex, setSelectConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n  const socket = useSocket();\r\n\r\n  function createConversation(recipients) {\r\n    setConversations((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n    ({ recipients, text, sender }) => {\r\n      setConversations((prevConversations) => {\r\n        let madeChange = false;\r\n        const newMessage = { sender, text };\r\n        const newConversations = prevConversations.map((conversation) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            madeChange = true;\r\n            return {\r\n              ...conversation,\r\n              messages: [...conversation.messages, newMessage],\r\n            };\r\n          }\r\n          return conversation;\r\n        });\r\n\r\n        if (madeChange) {\r\n          return newConversations;\r\n        } else {\r\n          return [...prevConversations, { recipients, messages: [newMessage] }];\r\n        }\r\n      });\r\n    },\r\n    [setConversations]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n    socket.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () => socket.off(\"receive-message\");\r\n  }, [socket, addMessageToConversation]);\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit(\"send-message\", { recipients, text });\r\n    addMessageToConversation({ recipients, text, sender: id });\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient;\r\n      });\r\n      const name = (contact && contact.name) || recipient;\r\n      return { id: recipient, name };\r\n    });\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender;\r\n      });\r\n      const name = (contact && contact.name) || message.sender;\r\n      const fromMe = id === message.sender;\r\n      return { ...message, senderName: name, fromMe };\r\n    });\r\n    const selected = index === selectConversationIndex;\r\n    return { ...conversation, messages, recipients, selected };\r\n  });\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectConversationIndex,\r\n    createConversation,\r\n  };\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n  a.sort();\r\n  b.sort();\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nexport default function OpenConversation() {\r\n  const [text, setText] = useState(\"\");\r\n  const setRef = useCallback((node) => {\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true });\r\n    }\r\n  }, []);\r\n  const { sendMessage, selectedConversation } = useConversations();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    sendMessage(\r\n      selectedConversation.recipients.map((r) => r.id),\r\n      text\r\n    );\r\n    setText(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column flex-grow-1\">\r\n      <div className=\"flex-grow-1 overflow-auto\">\r\n        <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n          {selectedConversation.messages.map((message, index) => {\r\n            const lastMessage =\r\n              selectedConversation.messages.length - 1 === index;\r\n            return (\r\n              <div\r\n                ref={lastMessage ? setRef : null}\r\n                key={index}\r\n                className={`my-1 d-flex flex-column ${\r\n                  message.fromMe\r\n                    ? \"align-self-end align-items-end\"\r\n                    : \"align-items-start\"\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`rounded px-2 py-1 ${\r\n                    message.fromMe ? \"bg-primary text-white\" : \"border\"\r\n                  }`}\r\n                >\r\n                  {message.text}\r\n                </div>\r\n                <div\r\n                  className={`text-muted small ${\r\n                    message.fromMe ? \"text-end\" : \"\"\r\n                  }`}\r\n                >\r\n                  {message.fromMe ? \" \" : message.senderName}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"m-2\">\r\n          <InputGroup>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              required\r\n              value={text}\r\n              onChange={(e) => setText(e.target.value)}\r\n              style={{ height: \"75px\", resize: \"none\" }}\r\n            />\r\n            <Button type=\"submit\">Enviar</Button>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nexport default function Conversations() {\r\n  const { conversations, selectConversationIndex } = useConversations();\r\n\r\n  return (\r\n    <ListGroup variant=\"flush\">\r\n      {conversations.map((conversation, index) => (\r\n        <ListGroup.Item\r\n          key={index}\r\n          action\r\n          active={conversation.selected}\r\n          onClick={() => selectConversationIndex(index)}\r\n        >\r\n          {conversation.recipients.map((r) => r.name).join(\", \")}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\n\r\nexport default function Contacts() {\r\n  const { contacts } = useContacts();\r\n\r\n  return (\r\n    <ListGroup variant=\"flush\">\r\n      {contacts.map((contact) => (\r\n        <ListGroup.Item key={contact.id}>{contact.name}</ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n  const [selectContactIds, setSelectContactIds] = useState([]);\r\n  const { contacts } = useContacts();\r\n  const { createConversation } = useConversations();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    createConversation(selectContactIds);\r\n    closeModal();\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectContactIds((prevSelectedContactIds) => {\r\n      if (prevSelectedContactIds.includes(contactId)) {\r\n        return prevSelectedContactIds.filter((prevId) => {\r\n          return contactId !== prevId;\r\n        });\r\n      } else {\r\n        return [...prevSelectedContactIds, contactId];\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Começar uma conversa</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          {contacts.map((contact) => (\r\n            <Form.Group controlId={contact.id} key={contact.id}>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                value={selectContactIds.includes(contact.id)}\r\n                label={contact.name}\r\n                onChange={() => handleCheckboxChange(contact.id)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          ))}\r\n          <Button className=\"mt-3\" type=\"submit\">\r\n            Criar\r\n          </Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\n\r\nexport default function NewContactModal({ closeModal }) {\r\n  const idRef = useRef();\r\n  const nameRef = useRef();\r\n  const { createContact } = useContacts();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    createContact(idRef.current.value, nameRef.current.value);\r\n    closeModal();\r\n  }\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Criar um contato</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Id</Form.Label>\r\n            <Form.Control type=\"text\" ref={idRef} required />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Nome</Form.Label>\r\n            <Form.Control type=\"text\" ref={nameRef} required />\r\n          </Form.Group>\r\n          <Button className=\"mt-3\" type=\"submit\">\r\n            Criar\r\n          </Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Tab, Nav, Button, Modal } from \"react-bootstrap\";\r\nimport Conversations from \"./Conversations\";\r\nimport Contacts from \"./Contacts\";\r\nimport NewConversationModal from \"./NewConversationModal\";\r\nimport NewContactModal from \"./NewContactModal\";\r\n\r\nconst CONVERSATIONS_KEY = \"conversations\";\r\nconst CONTACTS_KEY = \"contacts\";\r\n\r\nexport default function Sidebar({ id }) {\r\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const conversationsOpen = activeKey === CONVERSATIONS_KEY;\r\n  const style = {\r\n    cursor: \"pointer\",\r\n  };\r\n\r\n  function closeModal() {\r\n    setModalOpen(false);\r\n  }\r\n  return (\r\n    <div style={{ width: 250 }} className=\"d-flex flex-column\">\r\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n        <Nav variant=\"tabs\" className=\"justify-content-center\">\r\n          <Nav.Item>\r\n            <Nav.Link style={style} eventKey={CONVERSATIONS_KEY}>\r\n              Conversas\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link style={style} eventKey={CONTACTS_KEY}>\r\n              Contatos\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        <Tab.Content className=\"border-end overflow-auto flex-grow-1\">\r\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n            <Conversations />\r\n          </Tab.Pane>\r\n          <Tab.Pane eventKey={CONTACTS_KEY}>\r\n            <Contacts />\r\n          </Tab.Pane>\r\n        </Tab.Content>\r\n        <div className=\"p-2 border-end border-top small\">\r\n          Seu ID: <span className=\"text-muted\">{id}</span>\r\n        </div>\r\n        <Button onClick={() => setModalOpen(true)} className=\"rounded-0\">\r\n          {conversationsOpen ? \"Nova Conversa\" : \"Novo Contato\"}\r\n        </Button>\r\n      </Tab.Container>\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        {conversationsOpen ? (\r\n          <NewConversationModal closeModal={closeModal} />\r\n        ) : (\r\n          <NewContactModal closeModal={closeModal} />\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport OpenConversation from \"./OpenConversation\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nexport default function Dashboard({ id }) {\r\n  const { selectedConversation } = useConversations();\r\n  return (\r\n    <div className=\"d-flex\" style={{ height: \"100vh\" }}>\r\n      <Sidebar id={id} />\r\n      {selectedConversation && <OpenConversation />}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Login from \"./Login\";\nimport Dashboard from \"./Dashboard\";\nimport { ContactsProvider } from \"../contexts/ContactsProvider\";\nimport { ConversationsProvider } from \"../contexts/ConversationsProvider\";\nimport { SocketProvider } from \"../contexts/SocketProvider\";\n\nfunction App() {\n  const [id, setId] = useLocalStorage(\"id\");\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n\n  return id ? dashboard : <Login onIdSubmit={setId} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}